<style>
    .font-17 {
        font-size: 17px;
    }
</style>

@{
    var navSplit = Model.String("RelativeFilePath", string.Empty).Split(new[] { '\\' });
    var navFolder = navSplit[0];

    var shouldRenderSunNav = !navFolder.Contains(".");

    //if (navSplit.Count() > 1)
    //{
    //    navFolder = navSplit[0] + @"\" + navSplit[1];
    //}

    var allTopnavDocuments = Documents
                .Where(x => x.ContainsKey("RelativeFilePath")
                            //&& x.String("RelativeFilePath").StartsWith(navFolder + @"\")
                            && !x.String("SourceFileBase").StartsWith("_")
                            && !x.Get<bool>("Hidden", false)
                            //&& x.String("RelativeFilePath").StartsWith(navFolder)
                            && x.String("RelativeFilePath").EndsWith("ndex.md")
                            && x.String("RelativeFilePath", string.Empty)
                                        .Split(new[] { '\\' })
                                        .Count() == 2)
                 .OrderBy(x => x.String("Order", "0"))
                 .OrderBy(x => x.String("TileOrder", "0"))
                 .ToList();

    var currentNavDocument = allTopnavDocuments.FirstOrDefault(x => x.String("RelativeFilePath").StartsWith(navFolder + @"\"));
    var currentNavDocumentName = navFolder;

    if (currentNavDocument != null)
    {
        currentNavDocumentName = currentNavDocument.String("Title", currentNavDocument.String("SourceFileBase"))
            .Replace(" Home", String.Empty);
    }
}

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/">
                Documentation (beta)
                @if (shouldRenderSunNav)
                {
                    <span class="glyphicon glyphicon-chevron-right" />
                }
            </a>
        </div>

        @if (shouldRenderSunNav)
        {
            
            <ul class="nav navbar-nav">
                <li class="dropdown">
                    <a href="#" class="dropdown-toggle font-17"
                       data-toggle="dropdown"
                       role="button"
                       aria-haspopup="true"
                       aria-expanded="false">
                        @currentNavDocumentName<span class="caret"></span>
                    </a>
                    <ul class="dropdown-menu">

                        @foreach (var topNavDocument in allTopnavDocuments)
                        {
                            <li>
                                <a href="@(PathHelper.ToRootLink(PathHelper.RemoveExtension(topNavDocument.String("RelativeFilePath"))) + ".html")">
                                    @(topNavDocument.String("Title", topNavDocument.String("SourceFileBase")).Replace(" Home", String.Empty))
                                </a>
                            </li>
                        }

                        <!---
        <li><a href="/spmeta2-spec">SPMeta2 Spec</a></li>
        <li><a href="/spmeta2-nuget">SPMeta2 NuGet</a></li>
        <li role="separator" class="divider"></li>
        <li><a href="/reSP">reSP</a></li>
            -->
                    </ul>
                </li>
            </ul>
        }

    </div>
</div>